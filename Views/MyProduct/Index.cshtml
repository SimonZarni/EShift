@model List<EShift123.Models.Product>

@{
    ViewData["Title"] = "My Products";
}

<div class="container py-5">
    <h1 class="text-center mb-4 text-primary">My Products</h1>

    @* Display Success/Error Messages *@
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger text-center alert-dismissible fade show rounded-3 shadow-sm" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success text-center alert-dismissible fade show rounded-3 shadow-sm" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="text-end mb-3">
        <a asp-controller="MyProduct" asp-action="Create" class="btn btn-success rounded-pill shadow-sm px-4">
            <i class="bi bi-plus-circle me-2"></i> Create New Product
        </a>
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info text-center py-4 rounded-3 shadow-sm" role="alert">
            <i class="bi bi-info-circle display-4 mb-3 text-info"></i>
            <p class="lead">You haven't added any products yet.</p>
            <p class="mb-0">Click the "Create New Product" button above to define your first item.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover rounded-3 overflow-hidden shadow-sm mt-4">
                <thead class="table-light">
                    <tr>
                        <th>@Html.DisplayNameFor(model => model.First().Name)</th>
                        <th>@Html.DisplayNameFor(model => model.First().Category)</th>
                        <th>@Html.DisplayNameFor(model => model.First().WeightKg)</th>
                        <th>@Html.DisplayNameFor(model => model.First().Description)</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => product.Name)</td>
                            <td>@Html.DisplayFor(modelItem => product.Category)</td>
                            <td>@Html.DisplayFor(modelItem => product.WeightKg) Kg</td>
                            <td>@Html.DisplayFor(modelItem => product.Description)</td>
                            <td>
                                @* Explicitly setting asp-controller to MyProduct for clarity and robustness *@
                                <a asp-controller="MyProduct" asp-action="Edit" asp-route-productId="@product.ProductId" class="btn btn-sm btn-primary me-2 rounded-pill">Edit</a>
                                <a asp-controller="MyProduct" asp-action="Details" asp-route-productId="@product.ProductId" class="btn btn-sm btn-info me-2 rounded-pill">Details</a>
                                <a asp-controller="MyProduct" asp-action="Delete" asp-route-productId="@product.ProductId" class="btn btn-sm btn-danger rounded-pill">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <div class="mt-4 text-center">
        <a asp-controller="Customer" asp-action="Home" class="btn btn-secondary rounded-pill px-4">
            Back to Home
        </a>
        <a asp-controller="MyJob" asp-action="RequestJob" class="btn btn-primary rounded-pill px-4 ms-3">
            Request New Job
        </a>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
